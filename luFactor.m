function[L,U,P] = luFactor(A)
%The function "luFactor" will take the input coefficient matrix (A)(generated by a system of linear equations) and
%perform L U factorization with
%partial pivoting. this function will
%decompose [A] into its upper (U) and lower (L) triangular matrices, as well as its
%modified identity matrix, which can be used to solve for the variables
%used by the coefficient matrix. the relationship is [P]*[A] = [L]*[U].
%once the code has found these pieces then you can solve for the
%coefficients (in matrix form D) using [B]*[P]. then multiplu [U] by the
%original unknown variables and set it equal to [D] and solve
%this section checks to see if the number of rows matches the number of
%columns for the coefficient matrix A. if it does not an error message will
%appear telling the user that their A matrix must be a square matrix
if size(A,1) ~= size(A,2)
    error('input matrix A must be a 3x3 matrix')
end
%this section will set the initial values of L, U, and P based on the
%dimensions and values of A
n = length(A(:,1));
P = eye(n);
L = eye(n);
U = A;
%% Step 1: Pivoting
% the section below will pivot the U and P matrices. it will do so by first
% taking the absolute value of all the elements in A (A1 = abs(A)). then it will search
% those elements and find the row with the highest value in the first
% column (maxrow). it will then flip the rows so that the highest value element in
% the first row is on top, while pivoting the P matrix accordingly
A1 = abs(A(:,1));
maxrow = find(A1==max(A1));
U(maxrow,:) = A(1,:);
P(maxrow,:) = P(1,:);
U(1,:) = A(maxrow,:);
P1 = eye(n);
P(1,:) = P(maxrow,:);
%% Step 2: elimination (Gauss)
%this section will first find the scalars used to eliminate x1 (the first
%unknown) then it will place those in their correct places in the L matrix.
%then, it will perform naive gauss elimination to produce a new U matrix
%with U(2,1) and U(3,1) = 0
if U(2,1) ~= 0
    E1 = U(2,1)/U(1,1);
    L(2,1) = E1;
    Pri2 = U(2,:)-(E1*U(1,:));
    U(2,:) = Pri2;
else
    L(2,1) = 0;
    E1 = L(2,1);
    Pri2 = U(2,:);
end
if U(3,1) ~= 0
    E2 = (U(3,1))/(U(1,1));
    L(3,1) = E2;
    Pri3 = U(3,:)-(E2*U(1,:));
    U(3,:) = Pri3;
else
    L(3,1) = 0;
    E2 = L(3,1);
    Pri3 = U(3,:);
end
%% Step 3: Pivot again
%this section will perform the second round of pivoting in order to
%eliminate x2 from the third row of the U matrix. it will determine
%which of the second or third rows contains the largest value in the second
%column. then it will pivot based on the result of that search
piv3 = abs(Pri3(2));
piv2 = abs(Pri2(2));
if piv3 > piv2
    U = [U(1,:);Pri3;Pri2];
    L(2,1) = E2;
    L(3,1) = E1;
    P2 = P;
    P(2,:) = P2(3,:);
    P(3,:) = P2(2,:);
end
%% Step 4: elimination again
%this final section will perform the last round of naive gauss elimination
%to eliminate x2 from the third equation, as well as compile the final L
%and U matrices that will serve as function outputs
if U(3,2) ~= 0
    E3 = U(3,2)/U(2,2);
    L(3,2) = E3;
    Pri4 = U(3,:)-(E3*U(2,:));
    U(3,:) = Pri4;
else
    L(3,2) = 0;
    Pri4 = U(3,:);
    U(3,:) = Pri4;
    
end
end

    




    


